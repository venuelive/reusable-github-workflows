name: Cypress
on:
  workflow_call:
    inputs:
      venue-e2e-ref:
        default: master
        required: false
        type: string
      venue-ui-ref:
        default: master
        required: false
        type: string
      venue-rails-ref:
        default: master
        required: false
        type: string
    secrets:
      AGORA_APP_CERTIFICATE:
        required: true
      AGORA_APP_ID:
        required: true
      CYPRESS_RECORD_KEY:
        required: false
      GH_PAT:
        required: true
      FIREBASE_API_KEY:
        required: true
jobs:
  cypress-run:
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres:12.10
        env:
          POSTGRES_USER: venue
          POSTGRES_PASSWORD: venue
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:5.0.12
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      # Checkout source code
      - name: Checkout e2e
        uses: actions/checkout@v3
        with:
          repository: venuelive/venue-e2e
          ref: ${{ inputs.venue-e2e-ref }}
          token: ${{ secrets.GH_PAT }}
          path: e2e
      - name: Checkout frontend
        uses: actions/checkout@v3
        with:
          repository: venuelive/venue-ui
          ref: ${{ inputs.venue-ui-ref }}
          token: ${{ secrets.GH_PAT }}
          path: frontend
      - name: Checkout backend
        uses: actions/checkout@v3
        with:
          repository: venuelive/venue-rails
          ref: ${{ inputs.venue-rails-ref }}
          token: ${{ secrets.GH_PAT }}
          path: backend

      # Install dependencies
      - name: Set up ruby and install dependencies
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.7.6"
          bundler-cache: true
          working-directory: backend
      - name: Set up node
        uses: actions/setup-node@v3
        with:
          node-version: "16.14.0"
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Restore yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install firebase emulator
        run: yarn global add firebase-tools
      - name: Install frontend npm dependencies
        # FIXME: the prod build is requiring some of the dev dependencies
        # env:
        #   NODE_ENV: production
        run: yarn install --prefer-offline --frozen-lockfile
        working-directory: frontend
      - name: Install firebase functions npm dependencies
        run: yarn install --prefer-offline --frozen-lockfile
        working-directory: frontend/firebase-functions

      # Build
      - name: Build frontend assets
        env:
          REACT_APP_AGORA_APP_ID: ${{ secrets.AGORA_APP_ID }}
          REACT_APP_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: cypress.appspot.com
          REACT_APP_FIREBASE_PROJECT_ID: cypress
          REACT_APP_FIREBASE_EMULATOR: 1
        run: yarn build
        working-directory: frontend

      - name: Build firebase functions
        run: yarn run build
        working-directory: frontend/firebase-functions

      # Run app
      - name: Start backend app
        env:
          AGORA_APP_CERTIFICATE: ${{ secrets.AGORA_APP_CERTIFICATE }}
          AGORA_APP_ID: ${{ secrets.AGORA_APP_ID }}
          ALGOLIA_USERS_INDEX: test_cypress
          CYPRESS: 1
          DATABASE_URL: postgres://venue:venue@localhost:5432
          FIRESTORE_EMULATOR_HOST: 127.0.0.1:8080
          FIREBASE_PROJECT_ID: cypress
        run: |
          bundle exec rake db:create db:migrate
          bundle exec rails server &
          bundle exec sidekiq &
        working-directory: backend
      - name: Start frontend app
        run: firebase emulators:exec --project cypress 'npx serve -p 3000 -s build' &
        working-directory: frontend

      # Run tests
      - name: Run cypress tests
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          config: defaultCommandTimeout=30000,videoCompression=false
          headless: true
          record: ${{ !!secrets.CYPRESS_RECORD_KEY }}
          group: ${{ secrets.CYPRESS_RECORD_KEY && 'Chrome' }}
          working-directory: e2e
          wait-on: "http://localhost:3000, http://localhost:5000"
          wait-on-timeout: 300
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      # Upload test artifacts
      - name: Upload test screenshots
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-screenshots
          path: e2e/cypress/screenshots
          retention-days: 15
      - name: Upload test videos
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: cypress-videos
          path: e2e/cypress/videos
          retention-days: 15
